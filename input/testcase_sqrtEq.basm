;0.0000000001
$FUN $0 args:1 parent:$0
LDV 16
BST 0 0
LDF $1
APP 1            ; return initial guess value
BST 0 1 
BLD 0 1          ; we load 'guess'
BLD 0 1
MUL 
BLD 0 0
SUB              ; (guess * guess - number)
BST 0 2          ; GG-N => BST 0 2 
LDF $2
APP 1            ; Math.abs(GG-N)
LDV 0.0000000001 ; 1e-10
GT
BF +10
BLD 0 0          ;
BLD 0 1          ; 
DIV
BLD 0 1          ; 
ADD              ;  
LDV 2
DIV
BST 0 1          ; (guess + number / guess) / 2
BR -18
BLD 0 1
PRN
HLT
$END $0

$FUN $1 args:1 parent:$0 
BLD 1 0          ; we load the 'num' variable to compare (num < 0)  
LDV 0            ;
LT               ;
BT +18           ; if true we jump to NaN LDV
BLD 1 0          ; we load 'num' again to compare ('num' === 0 || 'num' === 1)
LDV 0            ;
EQ               ;
BST 0 0          ;
BLD 1 0          ; 
LDV 1            ;
EQ               ; 
BLD 0 0          ;
OR               ;
BT +7            ; if true we jump again to return the number        
BLD 1 0          ;
LDV 2            ;
DIV              ; 
BR +3            ;
BLD 1 0          ; if 'num' === 0 || 'num' === 1
BR +1            ;
LDV "NaN"        ; in case 'num' < 0
RET
$END $1

; Math.abs()
$FUN $2 args:1 parent:$0 
BLD 2 2
LDV 0
LT
BT +2
BLD 2 2
BR +2
BLD 2 2
NEG
RET
$END $2